name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches: [main]

jobs:
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run tests
        run: mise run test

      - name: Verify PR title follows Conventional Commits
        run: |
          # Extract PR title and check if it follows Conventional Commits format
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Regex pattern for Conventional Commits:
          # - Required type: feat|fix|docs|style|refactor|test|chore
          # - Optional scope: (anything except !)
          # - Optional breaking change indicator: !
          # - Required colon and space: ": "
          # - Required description: at least one character
          # Supports: type: desc, type!: desc, type(scope): desc, type(scope)!: desc, type!(scope): desc
          if ! echo "$PR_TITLE" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)(!(\([^)!]+\))?|(\([^)!]+\))!?)?: .+'; then
            echo "❌ Error: PR title must follow Conventional Commits format"
            echo ""
            echo "Expected format: type[!][(scope)]: description"
            echo ""
            echo "Supported types:"
            echo "  • feat     - new feature"
            echo "  • fix      - bug fix"
            echo "  • docs     - documentation changes"
            echo "  • style    - code style changes (formatting, etc.)"
            echo "  • refactor - code refactoring"
            echo "  • test     - adding or modifying tests"
            echo "  • chore    - maintenance tasks"
            echo ""
            echo "Examples:"
            echo "  ✅ feat: add user authentication"
            echo "  ✅ fix(api): resolve timeout issue"
            echo "  ✅ feat!: breaking change to API"
            echo "  ✅ docs(readme): update installation instructions"
            echo ""
            echo "Current title: '$PR_TITLE'"
            exit 1
          fi
          echo "✅ PR title follows Conventional Commits format: $PR_TITLE"

  create-release-pr:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Create release PR
        uses: release-plz/action@574c1d0ed8491b294f596b7148bafd08cca6a600 # v0.5.115
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-release:
    # TEMPORARILY DISABLED: Run on all pushes for testing
    # TODO: Restore original condition before merging:
    # Only run when a release PR is merged to main (chore(release): commit messages)
    # if: >
    #   github.event_name == 'push' &&
    #   github.ref == 'refs/heads/main' &&
    #   startsWith(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Build release binaries
        run: mise run build-release

      - name: Create GitHub release
        uses: release-plz/action@574c1d0ed8491b294f596b7148bafd08cca6a600 # v0.5.115
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Upload binaries to release
        run: |
          # Verify we have binaries to upload
          if [ ! -d "release" ] || [ -z "$(ls -A release/)" ]; then
            echo "❌ No binaries found in release/ directory"
            exit 1
          fi

          # Get the latest release tag (created by release-plz)
          RELEASE_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null)
          if [ -z "$RELEASE_TAG" ] || [ "$RELEASE_TAG" = "null" ]; then
            echo "❌ No release found. Release creation may have failed."
            exit 1
          fi

          echo "Found release tag: $RELEASE_TAG"
          echo "Uploading binaries to release..."

          # Track upload status
          upload_count=0
          failed_uploads=()

          # Upload all binaries to the release
          for binary in release/*; do
            if [[ -f "$binary" ]]; then
              binary_name=$(basename "$binary")
              echo "Uploading $binary_name..."

              if gh release upload "$RELEASE_TAG" "$binary" --clobber 2>/dev/null; then
                echo "✅ Successfully uploaded $binary_name"
                upload_count=$((upload_count + 1))
              else
                echo "❌ Failed to upload $binary_name"
                failed_uploads+=("$binary_name")
              fi
            fi
          done

          # Report results
          echo ""
          echo "Upload summary:"
          echo "  Successfully uploaded: $upload_count binaries"

          if [ ${#failed_uploads[@]} -gt 0 ]; then
            echo "  Failed uploads: ${#failed_uploads[@]}"
            printf '    - %s\n' "${failed_uploads[@]}"
            echo "❌ Some binary uploads failed"
            exit 1
          else
            echo "✅ All $upload_count binaries uploaded successfully to release $RELEASE_TAG"
          fi
        env:
          GH_TOKEN: ${{ github.token }}
