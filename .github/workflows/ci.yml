name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches: [main]

jobs:
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 1

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run tests
        run: mise run test

      - name: Verify PR title follows Conventional Commits
        run: |
          # Extract PR title and check if it follows Conventional Commits format
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Regex pattern for Conventional Commits:
          # - Required type: feat|fix|docs|style|refactor|test|chore
          # - Optional scope: (anything except !)
          # - Optional breaking change indicator: !
          # - Required colon and space: ": "
          # - Required description: at least one character
          # Supports: type: desc, type!: desc, type(scope): desc, type(scope)!: desc, type!(scope): desc
          if ! echo "$PR_TITLE" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)(!(\([^)!]+\))?|(\([^)!]+\))!?)?: .+'; then
            echo "❌ Error: PR title must follow Conventional Commits format"
            echo ""
            echo "Expected format: type[!][(scope)]: description"
            echo ""
            echo "Supported types:"
            echo "  • feat     - new feature"
            echo "  • fix      - bug fix"
            echo "  • docs     - documentation changes"
            echo "  • style    - code style changes (formatting, etc.)"
            echo "  • refactor - code refactoring"
            echo "  • test     - adding or modifying tests"
            echo "  • chore    - maintenance tasks"
            echo ""
            echo "Examples:"
            echo "  ✅ feat: add user authentication"
            echo "  ✅ fix(api): resolve timeout issue"
            echo "  ✅ feat!: breaking change to API"
            echo "  ✅ docs(readme): update installation instructions"
            echo ""
            echo "Current title: '$PR_TITLE'"
            exit 1
          fi
          echo "✅ PR title follows Conventional Commits format: $PR_TITLE"

  release-plz-pr:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Create release PR with release-plz
        uses: MarcoIeni/release-plz-action@e1b96e8cfeff90d86d37c0e8ba23bf0d84f56ed9 # v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-plz-release:
    # Only run when a release PR is merged to main
    # release-plz creates releases with specific commit message patterns
    if: >
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      startsWith(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Create GitHub release with release-plz
        uses: MarcoIeni/release-plz-action@e1b96e8cfeff90d86d37c0e8ba23bf0d84f56ed9 # v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and upload cross-platform binaries when a release is created
  build-and-upload-binaries:
    # Only run when a tag is created (after release-plz creates the release)
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-suffix: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Build release binary
        run: mise run build

      - name: Prepare binary for upload
        shell: bash
        run: |
          # Create properly named binary with platform information
          binary_name="mcp-serve${{ matrix.binary-suffix }}"
          platform_name="${{ matrix.target }}"

          # Copy built binary to release directory with platform-specific naming
          mkdir -p release
          if [ -f "target/release/$binary_name" ]; then
            cp "target/release/$binary_name" "release/mcp-serve-$platform_name${{ matrix.binary-suffix }}"
            echo "Prepared binary: release/mcp-serve-$platform_name${{ matrix.binary-suffix }}"
            ls -la release/
          else
            echo "Binary not found at target/release/$binary_name"
            echo "Contents of target/release:"
            ls -la target/release/ || echo "target/release directory not found"
            exit 1
          fi

      - name: Upload binary to release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2
        with:
          files: release/mcp-serve-*
