name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches: [main]

jobs:
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          fetch-depth: '1'

      - name: Run tests
        run: mise run test

      - name: Verify PR title follows Conventional Commits
        run: |
          # Extract PR title and check if it follows Conventional Commits format
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Regex pattern for Conventional Commits:
          # - Required type: feat|fix|docs|style|refactor|test|chore
          # - Optional scope: (anything except !)
          # - Optional breaking change indicator: !
          # - Required colon and space: ": "
          # - Required description: at least one character
          # Supports: type: desc, type!: desc, type(scope): desc, type(scope)!: desc, type!(scope): desc
          if ! echo "$PR_TITLE" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)(!(\([^)!]+\))?|(\([^)!]+\))!?)?: .+'; then
            echo "❌ Error: PR title must follow Conventional Commits format"
            echo ""
            echo "Expected format: type[!][(scope)]: description"
            echo ""
            echo "Supported types:"
            echo "  • feat     - new feature"
            echo "  • fix      - bug fix"
            echo "  • docs     - documentation changes"
            echo "  • style    - code style changes (formatting, etc.)"
            echo "  • refactor - code refactoring"
            echo "  • test     - adding or modifying tests"
            echo "  • chore    - maintenance tasks"
            echo ""
            echo "Examples:"
            echo "  ✅ feat: add user authentication"
            echo "  ✅ fix(api): resolve timeout issue"
            echo "  ✅ feat!: breaking change to API"
            echo "  ✅ docs(readme): update installation instructions"
            echo ""
            echo "Current title: '$PR_TITLE'"
            exit 1
          fi
          echo "✅ PR title follows Conventional Commits format: $PR_TITLE"

  release-plz-pr:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Create release PR with release-plz
        run: |
          echo "TODO: Implement release-plz integration for PR creation"
          echo "This step will:"
          echo "1. Analyze conventional commits since last release"
          echo "2. Determine appropriate version bump"
          echo "3. Update Cargo.toml version in a new PR"
          echo "4. Generate changelog for the PR"
          echo "5. Create release PR for manual review and merge"

  release-plz-release:
    # TODO: Add condition to detect when a release PR is merged
    # This is a placeholder - actual implementation needs to identify release PR merges
    if: false # Disabled until proper release PR detection is implemented
    runs-on: ubuntu-latest

    steps:
      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Create GitHub release with release-plz
        run: |
          echo "TODO: Implement release-plz integration for release creation"
          echo "This step will:"
          echo "1. Create actual GitHub release with tag"
          echo "2. Use generated changelog in release description"

      - name: Build release binaries
        run: |
          echo "TODO: Implement cross-platform build matrix"
          echo "This step will build binaries for:"
          echo "- macOS (latest)"
          echo "- Ubuntu (latest)"
          echo "- Windows (latest)"
          mise run build

      - name: Upload binaries to release
        run: |
          echo "TODO: Upload compiled binaries to the GitHub release"
